@page "/products/products"

@attribute [Authorize(policy:"AdminOnly")]

@inject IProductUseCase productUseCase;
@inject ICategoryUseCase categoryUseCase;
@inject NavigationManager navigationManager;
<h3>Products</h3>

@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var product in products)
            {
                <tr>
                    <td>@categoryUseCase.GetCategoryById(product.categoryId.Value).Name</td>
                    <td>@product.Name</td>
                    <td>@Math.Round(@product.Price.Value,2)</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button class="btn btn-link" type="button" @onclick="@( ()=>EditHandle(product) )">Edit</button>
                        <button class="btn btn-link" type="button" @onclick="@( ()=>DeleteHandle(product) )">Delete</button>
                    </td>
                </tr>
            }

        </tbody>
        <br />
        <button type="button" class="btn btn-primary" @onclick="NavigationToAddProduct">Add Product</button>
    </table>
}

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        loadProducts();
    }

    private void loadProducts()
    {
        products = productUseCase.GetAllProducts();
    }

    private void NavigationToAddProduct()
    {
        navigationManager.NavigateTo("/products/addProduct");
    }

    private void EditHandle(Product product)
    {
        navigationManager.NavigateTo($"/products/editProduct/{product.ProductId}");
    }

    private void DeleteHandle(Product product)
    {
        productUseCase.DeleteProduct(product.ProductId);
        loadProducts();
    }
}
