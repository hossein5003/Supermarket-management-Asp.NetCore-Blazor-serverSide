@page "/products/EditProduct/{id}"

@attribute [Authorize(policy:"AdminOnly")]

@inject ICategoryUseCase categoryUseCase;
@inject IProductUseCase productUseCase;
@inject NavigationManager navigationManager;

<h3>Edit Product</h3>

@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group mt-3 mb-3">
            <label for="Name">Name</label>
            <InputText @bind-Value="product.Name" id="name" class="form-control">@product.Name</InputText>
        </div>
        <div class="form-group mt-3 mb-3">
            <label for="category">Category</label>
            <select class="form-control" @bind="product.CategoryId">
                
                @foreach (var category in categories)
                {
                    @if (category.Id == product.CategoryId)
                    {
                        <option value="@category.Id" selected>@category.Name</option>
                    }
                    else
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }

            </select>
        </div>

        <div class="form-group mt-3 mb-3">
            <label for="Price">Price</label>
            <InputNumber @bind-Value="product.Price" @bind-Value:format="F2" id="Price" class="form-control">@product.Price</InputNumber>
        </div>
        <div class="form-group mt-3 mb-3">
            <label for="Quantity">Quantity</label>
            <InputNumber @bind-Value="product.Quantity" id="Quantity" class="form-control">@product.Quantity</InputNumber>
        </div>


        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="handleCancel">Cancel</button>

    </EditForm>
}

@code {
    [Parameter]
    public string id { get; set; }

    private Product originalProduct;
    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        product = new Product();
        categories = categoryUseCase.GetCategories();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        originalProduct = productUseCase.GetProductById(int.Parse(id));
        product.Id = originalProduct.Id;
        product.CategoryId = originalProduct.CategoryId;
        product.Name = originalProduct.Name;
        product.Price = originalProduct.Price;
        product.Quantity = originalProduct.Quantity;
    }

    private void OnValidSubmit()
    {
        productUseCase.UpdateProduct(product);
        navigationManager.NavigateTo("products/products");
    }

    private void handleCancel()
    {
        navigationManager.NavigateTo("products/products");
    }
}
